"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Youtube = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
/**
 * @param {string} key The YouTube Data API v3 key to use
 */
class Youtube {
    constructor(API_KEY) {
        this.API_KEY = API_KEY;
        this.CHANNELS_URL = 'https://www.googleapis.com/youtube/v3/channels?';
        this.PLAYLIST_URL = 'https://www.googleapis.com/youtube/v3/playlistItems?';
        this.VIDEO_URL = 'https://www.googleapis.com/youtube/v3/videos?';
        // Checking if the API KEY provided is valid
        const channelUrl = `${this.CHANNELS_URL}id=UCZU5ofyBsEmVuKYrijLFxrg&key=${this.API_KEY}`;
        node_fetch_1.default(channelUrl)
            .then(response => response.json())
            .then(data => {
            var _a;
            if (data.error) {
                Promise.reject((_a = data.error) === null || _a === void 0 ? void 0 : _a.message);
            }
            else {
                console.info('Connected to Youtube API successfully');
            }
        });
    }
    /**
     * Get Channel Data or Test the API
     * @param {string} channelUrl The specific fetching Url with API_KEY
     * @returns {Promise<?contentDetails>}
     * @example
     */
    getData(channelUrl) {
        console.log('aaaaaaaa');
        return node_fetch_1.default(channelUrl)
            .then((response) => response.json())
            .then(data => {
            if (data.pageInfo.totalResults === 0) {
                return Promise.reject(new Error(`Wrong ID`));
            }
            else {
                return data;
            }
        });
    }
    /**
     * Get Video List Max 50 per request
     * @param {string} channelUrl The specific fetching Url with API_KEY
     * @param {string} pageToken The code for a specific set of videos
     * @returns {Promise<?listDetails>}
     * @example
     */
    getList(channelUrl, pageToken) {
        return node_fetch_1.default(channelUrl + (pageToken ? `&pageToken=${pageToken}` : ''))
            .then((response) => response.json())
            .then(data => {
            if (data.error) {
                return Promise.reject(new Error(data.error.message));
            }
            else {
                return data;
            }
        });
    }
    /**
     * Get Video List Max 50 per request
     * @param {Array} videos The array all the videos are appended to
     * @param {Array} listDetails The array of Video List, MAX=50
     * @returns {Promise<?Array>}
     * @example
     */
    getVideos(videos, listDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(listDetails.items.map((data) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                const video_id = (_b = (_a = data.snippet) === null || _a === void 0 ? void 0 : _a.resourceId) === null || _b === void 0 ? void 0 : _b.videoId;
                const videoDetails = yield this.videoInfo(video_id);
                videos.push(videoDetails);
            })));
        });
    }
    /**
     * Get channel Details by ID
     * @param {string} channel_id The channel ID
     * @returns {Promise<?channelDetails>}
     * @example
     */
    channelDetails(channel_id) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        return __awaiter(this, void 0, void 0, function* () {
            console.info('Fetching Channel Information...');
            console.log('aaaaaaaaaaaaaaa');
            const channelUrl = `${this.CHANNELS_URL}id=${channel_id}&part=contentDetails,snippet,statistics&key=${this.API_KEY}`;
            const data = yield this.getData(channelUrl);
            return {
                title: (_c = (_b = (_a = data.items[0]) === null || _a === void 0 ? void 0 : _a.snippet) === null || _b === void 0 ? void 0 : _b.localized) === null || _c === void 0 ? void 0 : _c.title,
                thumbnails: (_e = (_d = data.items[0]) === null || _d === void 0 ? void 0 : _d.snippet) === null || _e === void 0 ? void 0 : _e.thumbnails,
                country: (_g = (_f = data.items[0]) === null || _f === void 0 ? void 0 : _f.snippet) === null || _g === void 0 ? void 0 : _g.country,
                uploads_id: (_k = (_j = (_h = data.items[0]) === null || _h === void 0 ? void 0 : _h.contentDetails) === null || _j === void 0 ? void 0 : _j.relatedPlaylists) === null || _k === void 0 ? void 0 : _k.uploads,
                statistics: (_l = data.items[0]) === null || _l === void 0 ? void 0 : _l.statistics,
            };
        });
    }
    /**
     * Get Channel videos By channel Uploads ID
     * @param {string} uploads_id The channel Uploads ID
     * @param {Array} videos an empty array
     * @returns {Promise<?videoDetails>}
     * @example
     */
    videosList(uploads_id, videos) {
        return __awaiter(this, void 0, void 0, function* () {
            console.info('Fetching Video List...');
            const listUrl = `${this.PLAYLIST_URL}playlistId=${uploads_id}&part=snippet&maxResults=50&key=${this.API_KEY}`;
            let listDetails = yield this.getList(listUrl);
            yield this.getVideos(videos, listDetails);
            console.info(`Fetching videos in progress... ${videos.length} videos fetched`);
            while (listDetails.nextPageToken) {
                listDetails = yield this.getList(listUrl, listDetails.nextPageToken);
                yield this.getVideos(videos, listDetails);
                console.info(`Fetching videos in progress... ${videos.length} videos fetched`);
            }
            console.info('Videos fetched successfully');
            return videos;
        });
    }
    /**
     *
     * Get Video Details by ID
     * @param {string} video_id The Video ID
     * @returns {Promise<?videoDetails>}
     * @example
     */
    videoInfo(video_id) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const videoUrl = `${this.VIDEO_URL}part=snippet,statistics,contentDetails&id=${video_id}&key=${this.API_KEY}`;
            const data = yield this.getData(videoUrl);
            return {
                title: (_b = (_a = data.items[0]) === null || _a === void 0 ? void 0 : _a.snippet) === null || _b === void 0 ? void 0 : _b.title,
                video_id: video_id,
                thumbnails: (_d = (_c = data.items[0]) === null || _c === void 0 ? void 0 : _c.snippet) === null || _d === void 0 ? void 0 : _d.thumbnails,
                statistics: (_e = data.items[0]) === null || _e === void 0 ? void 0 : _e.statistics
            };
        });
    }
}
exports.Youtube = Youtube;
//# sourceMappingURL=index.js.map